import asyncio
import logging
import websockets
import json
import os
import uuid

# Import our configuration manager to load settings from config.ini.
from utils.config_manager import ConfigManager

# Initialize logging.
logging.basicConfig(level=logging.DEBUG, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

# Load configuration.
config = ConfigManager("config.ini")
VTS_WS_URL = config.get("WebSocket", "VTS_WS_URL", fallback="ws://localhost:8001")
PLUGIN_NAME = config.get("Plugin", "name", fallback="AnimotionPlugin")
PLUGIN_DEV = config.get("Plugin", "developer", fallback="YourName")

# Token file where the authentication token is stored.
TOKEN_FILE = "vts_token.txt"


async def get_token(ws):
    """
    Request an authentication token from VTube Studio and store it locally.
    """
    request = {
        "apiName": "VTubeStudioPublicAPI",
        "apiVersion": "1.0",
        "requestID": str(uuid.uuid4()),
        "messageType": "AuthenticationTokenRequest",
        "data": {
            "pluginName": PLUGIN_NAME,
            "pluginDeveloper": PLUGIN_DEV
        }
    }
    await ws.send(json.dumps(request))
    raw_response = await ws.recv()
    logger.info(f"Received token response: {raw_response}")
    response = json.loads(raw_response)
    token = response.get("data", {}).get("authenticationToken")
    if not token:
        logger.error("No authentication token found in response.")
        raise Exception("Token retrieval failed.")
    if response.get("data", {}).get("requiresVerification", False):
        logger.info("This plugin requires verification. Please approve it in VTube Studio.")
    with open(TOKEN_FILE, "w") as f:
        f.write(token)
    return token


async def authenticate(ws, token):
    """
    Authenticate with VTube Studio using the provided token.
    """
    auth_request = {
        "apiName": "VTubeStudioPublicAPI",
        "apiVersion": "1.0",
        "requestID": str(uuid.uuid4()),
        "messageType": "AuthenticationRequest",
        "data": {
            "pluginName": PLUGIN_NAME,
            "pluginDeveloper": PLUGIN_DEV,
            "authenticationToken": token
        }
    }
    await ws.send(json.dumps(auth_request))
    raw_response = await ws.recv()
    logger.info(f"Authentication response: {raw_response}")
    response = json.loads(raw_response)
    if response.get("messageType") != "AuthenticationResponse" or \
       not response.get("data", {}).get("authenticated", False):
        error_msg = response.get("data", {}).get("message", "Unknown error")
        logger.error(f"Authentication failed: {error_msg}")
        raise Exception("Authentication failed: " + error_msg)
    logger.info("Authentication successful.")
    return response


async def get_current_model(ws):
    """
    Retrieve the model that is currently loaded in VTube Studio.
    """
    request = {
        "apiName": "VTubeStudioPublicAPI",
        "apiVersion": "1.0",
        "requestID": str(uuid.uuid4()),
        "messageType": "CurrentModelRequest",
        "data": {}
    }
    await ws.send(json.dumps(request))
    raw_response = await ws.recv()
    logger.info(f"Current model response: {raw_response}")
    response = json.loads(raw_response)
    if response.get("messageType") == "CurrentModelResponse":
        model_id = response.get("data", {}).get("modelID")
        if not model_id:
            logger.warning("No model is currently loaded in VTube Studio.")
        return model_id
    else:
        error_message = response.get("data", {}).get("message", "Unknown error")
        logger.error(f"Failed to retrieve current model: {error_message}")
        raise Exception("Failed to retrieve current model.")


async def get_parameter_list(ws, model_id):
    """
    Retrieve the list of input parameters for the current model.
    """
    request = {
        "apiName": "VTubeStudioPublicAPI",
        "apiVersion": "1.0",
        "requestID": str(uuid.uuid4()),
        "messageType": "InputParameterListRequest",
        "data": {
            "modelID": model_id
        }
    }
    await ws.send(json.dumps(request))
    raw_response = await ws.recv()
    logger.info(f"Parameter list response: {raw_response}")
    response = json.loads(raw_response)
    if response.get("messageType") == "InputParameterListResponse":
        parameters = response.get("data", {}).get("parameters", [])
        logger.info(f"Retrieved {len(parameters)} parameters.")
        return parameters
    else:
        logger.error("Failed to retrieve parameter list.")
        return []


async def set_parameters(ws, param_dict):
    """
    Send updated parameter values to VTube Studio.
    
    The parameter dictionary should map parameter IDs to float values. In a production system,
    these values can be generated by processing your detection metrics.
    """
    request = {
        "apiName": "VTubeStudioPublicAPI",
        "apiVersion": "1.0",
        "requestID": str(uuid.uuid4()),
        "messageType": "SetParameterValueRequest",
        "data": {
            "parameterValues": [
                {"id": key, "value": float(val)} for key, val in param_dict.items()
            ]
        }
    }
    await ws.send(json.dumps(request))
    logger.debug("Sent parameter update: " + json.dumps(request))
    # Optionally, wait for an acknowledgement
    # raw_response = await ws.recv()
    # logger.debug("Set parameter acknowledgement: " + raw_response)


async def vtube_plugin_client():
    """
    Connect to VTube Studio, perform token management and authentication,
    retrieve the current model & parameter list, and continuously send parameter updates.
    """
    async with websockets.connect(VTS_WS_URL) as ws:
        logger.info("Connected to VTube Studio at " + VTS_WS_URL)
        # Load token from file if available; otherwise, request a new one.
        if os.path.exists(TOKEN_FILE):
            with open(TOKEN_FILE, "r") as f:
                token = f.read().strip()
            logger.info("Token loaded from file.")
        else:
            token = await get_token(ws)
    
        # Authenticate with the token.
        await authenticate(ws, token)
    
        # Get the currently active model.
        model_id = await get_current_model(ws)
        if not model_id:
            logger.error("No model loaded in VTube Studio; ensure one is loaded before running the plugin.")
            return
        
        # Get the available parameter list (for debugging/verification).
        await get_parameter_list(ws, model_id)
    
        logger.info("Beginning parameter updates. Press Ctrl+C to stop.")
        try:
            while True:
                # For demonstration purposes, we send fixed parameter values.
                # In a complete system, these values come from your detection and mapping pipeline.
                param_dict = {
                    "ParamMouthOpenY": 0.6,
                    "ParamEyesClosed": 0.2,
                    "ParamHeadYaw": 0.0,
                    "ParamHeadPitch": 0.0,
                    "ParamHeadRoll": 0.0,
                    "Emotion": 0.0  # This can represent a mapped numeric emotion value.
                }
                await set_parameters(ws, param_dict)
                # Update at roughly 30 Hz.
                await asyncio.sleep(1 / 30)
        except KeyboardInterrupt:
            logger.info("Keyboard interrupt received; shutting down vtube plugin client.")


if __name__ == "__main__":
    try:
        asyncio.run(vtube_plugin_client())
    except Exception as e:
        logger.error("An error occurred in vtube_plugin_client: " + str(e))